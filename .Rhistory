x <- vector(1,2,3)
x <- vector("numeric", length = 3)
x[1] <- 1
x[3] <- 3
x[[2]] <- NULL
x[[1]] <- NULL
x$[[1]] <- NULL
x[[1]]
x[[2]]
x[[3]]
x[[3]] <- NULL
m <- matrix(2,3)
m
m <- matrix(nrow = 2, ncol = 3)
m
m[2,2] <- 4
m
m[1,2] <- 3
m
m <- 1:6
m
mode(m)
class(m)
q()
install.packages(c("DBI", "lubridate", "openssl", "pillar", "rmarkdown", "tidyselect", "yaml"))
q()
q()
install.packages("yaml")
q()
library(XBRL)
install.packages("XBRL")
# =====================
#  Parse Walmart 10-K
# (2016, FYE 1/31/2017)
#  Download 1/15/2018
# =====================
library(devtools)
install_github("bergant/finstr")
library(XBRL)
library(finstr)
library(devtools)
options(scipen = 999)
options(stringsAsFactors = FALSE)
# XBRL instance file - Walmart 2016 (FYE 1/17) 10-K
inst <- "https://www.sec.gov/Archives/edgar/data/104169/000010416917000021/wmt-20170131.xml"
# Process XBRL file
xbrl_wmt2017 <- xbrlDoAll(inst)
# Get financial statements
st2017 <- xbrl_get_statements(xbrl_wmt2017)
# Get Balance Sheet
balSheet <- st2017$ConsolidatedBalanceSheets
# Save Financial Data
saveRDS(st2017, "st2017")
saveRDS(xbrl_data_wmt2017, "xbrl2017")
View(balSheet)
View(balSheet)
q()
q()
q()
q()
q()
q()
q()
q()
setwd("~/code/r/projectGithub/retail4BA")
# Read in Store Size ('General info') worksheet
ss <- read_xlsx("Analysis-by-cohorts-vintage-example.xlsx", sheet = "General info", skip = 2)
library(dplyr)
library(readxl)
library(ggplot2)
# Read in Store Size ('General info') worksheet
ss <- read_xlsx("Analysis-by-cohorts-vintage-example.xlsx", sheet = "General info", skip = 2)
View(ss)
View(ss)
# Read in 'Sales by Store' worksheet
sbs <- read_xlsx("Analysis-by-cohorts-vintage-example.xlsx", sheet = "Sales by Store", skip = 2)
View(sbs)
View(ss)
# Calculate Sales Density for Store #1132 in Breslau
sbs$`Net sales In EUR` / sbs$`Space In sq m`
View(sbs)
colnames(sbs)
h1 <- colnames(sbs)
make.names(h1)
gsub("..",".",h1)
gsub("\.\.","\.",h1)
gsub("\\.\\.","\\.",h1)
h1 <- make.names(h1)
h1
gsub("\\.\\.","\\.",h1)
h1 <- colnames(sbs) %>%
make.names() %>%
gsub("\\.\\.","\\.")
colnames(sbs) # %>%
h1 <- colnames(sbs) # %>%
h1 <- colnames(sbs) %>%
make.names() # %>%
h1 <- colnames(sbs) %>%
make.names() %>%
gsub("\\.\\.","\\.")
h1 <- colnames(sbs) %>%
make.names()
h1 <- gsub("\\.\\.","\\.",h1)
names(sbs) <- h1
?make.names
# Create valid column names for 'Store Size' table
h1 <- colnames(ss) %>%
make.names()
names(ss) <- gsub("\\.\\.","\\.",h1)
rm(h1)
# Calculate Sales Density for Store #1132 in Breslau
sbs$Net.sales.In.EUR / sbs$Space.In.sq.m
dim(ss)
storeNum <- length(ss)
storeNum <- nrow(ss)
# Number of stores
nrow(ss)
# Number of stores from 'Store Size' table
storeNum <- nrow(ss)
# Store Numbers unique?
unique(storeNum)
# Sales by Store table describes same stores?
unique(sbs$Store.Number.new)
# Sales by Store table describes same stores?
count(unique(sbs$Store.Number.new))
# Number of stores from 'Store Size' table
count(ss$Store.Number.new)
# Number of stores from 'Store Size' table
ss %>%
count(Store.Number.new)
# Number of stores from 'Store Size' table
nrows(ss)
# Number of stores from 'Store Size' table
nrow(ss)
# Store Numbers unique? yes
unique(ss$Store.Number.new)
# Store Numbers unique? yes
count(unique(ss$Store.Number.new))
# Store Numbers unique? yes
storeNum <- unique(ss$Store.Number.new)
length(storeNum)
# Sales by Store table describes same stores?
length(unique(sbs$Store.Number.new))
# Sales by Store table describes same stores?
storeNum2 <- unique(sbs$Store.Number.new)
setdiff(storeNum,storeNum2)
length(storeNum2)
# ----------------------------------
# Calculate Sales Density for Store #1132 in Breslau
s1132 <- ss[(Store.Number.new == 1132),]
# ----------------------------------
# Calculate Sales Density for Store #1132 in Breslau
s1132 <- ss[(ss$Store.Number.new == 1132),]
s1132$Net.sales.In.EUR / s1132$Space.In.sq.m
s1132
# ----------------------------------
# Calculate Sales Density for Store #1132 in Breslau
# in 2010
s1132 <- sbs[(sbs$Store.Number.new == 1132),]
# ----------------------------------
# Calculate Sales Density for Store #1132 in Breslau
# in 2010
s1132 <- sbs[(sbs$Store.Number.new == 1132 & sbs$Year == 2010),]
s1132$Net.sales.In.EUR / s1132$Space.In.sq.m
round(s1132$Net.sales.In.EUR / s1132$Space.In.sq.m)
q()
# Load libraries
library(dplyr)
library(readxl)
library(ggplot2)
# Read in 'Sales by Store' worksheet
sbs <- read_xlsx("Analysis-by-cohorts-vintage-example.xlsx", sheet = "Sales by Store", skip = 2)
# Create valid column names for 'Sales by Store' table
h1 <- colnames(sbs) %>%
make.names()
names(sbs) <- gsub("\\.\\.","\\.",h1)
rm(h1)
View(sbs)
# Read in Store Size ('General info') worksheet
ss <- read_xlsx("Analysis-by-cohorts-vintage-example.xlsx", sheet = "General info", skip = 2)
# Create valid column names for 'Store Size' table
h1 <- colnames(ss) %>%
make.names()
names(ss) <- gsub("\\.\\.","\\.",h1)
rm(h1)
View(ss)
View(ss)
rowSums(ss[,4:8])
colSums(ss[,4:8])
colSums(ss[,4:8], na.rm = T)
# Get total square meter store space
# for 5 product categories
catSpaceTotals <- colSums(ss[,4:8], na.rm = T)
hist(catSpaceTotals)
ggplot(catSpaceTotals) + geom_bar()
catSpaceTotals <- as_tibble(catSpaceTotals)
View(catSpaceTotals)
ggplot(catSpaceTotals) + geom_bar()
View(catSpaceTotals)
ggplot(catSpaceTotals) + geom_bar(x = value)
names(catSpaceTotals) <- c("Category","Space")
catSpaceTotals <- as_data_frame(catSpaceTotals)
catSpaceTotals <- as_tibble(catSpaceTotals)
# Get total square meter store space
# for 5 product categories
catSpaceTotals <- colSums(ss[,4:8], na.rm = T)
catSpaceTotals <- as_data_frame(catSpaceTotals)
names(catSpaceTotals) <- c("Category","Space")
colnames(catSpaceTotals) <- c("Category","Space")
View(catSpaceTotals)
colnames(catSpaceTotals)
ggplot(catSpaceTotals) + geom_bar(x = value)
# Get total square meter store space
# for 5 product categories
catSpaceTotals <- colSums(ss[,4:8], na.rm = T)
catSpaceTotals <- as.data.frame(catSpaceTotals)
View(catSpaceTotals)
catSpaceTotals <- as_tibble(catSpaceTotals)
colnames(catSpaceTotals) <- "CatSpcTotal"
ggplot(data = catSpaceTotals) + geom_bar(mapping = aes(names(catSpaceTotals)))
ggplot(data = catSpaceTotals) +
geom_bar(mapping = aes(names(catSpaceTotals), fill = CatSpcTotal))
names(catSpaceTotals)
ggplot(data = catSpaceTotals) +
geom_bar(mapping = aes(rownames(catSpaceTotals), fill = CatSpcTotal))
ggplot(data = catSpaceTotals) +
geom_bar(mapping = aes(rownames(catSpaceTotals), CatSpcTotal))
ggplot(data = catSpaceTotals) +
geom_bar(mapping = aes(rownames(catSpaceTotals), y= CatSpcTotal))
ggplot(data = catSpaceTotals) +
geom_bar(mapping = aes(rownames(catSpaceTotals), fill = CatSpcTotal))
str(catSpaceTotals)
ggplot(data = catSpaceTotals) +
geom_bar(mapping = aes(CatSpcTotal))
ggplot(data = catSpaceTotals) +
geom_bar(mapping = aes(CatSpcTotal))
ggplot(catSpaceTotals, aes(x = catSpaceTotals))
# Get total square meter store space
# for 5 product categories
catSpaceTotals <- colSums(ss[,4:8], na.rm = T)
catSpaceTotals <- as_tibble(catSpaceTotals)
colnames(catSpaceTotals) <- "CatSpcTotal"
ggplot(catSpaceTotals, aes(x = catSpaceTotals))
ggplot(catSpaceTotals, aes(x = rownames(catSpaceTotals), y = CatSpcTotal))
ggplot(catSpaceTotals, aes(x = rownames(catSpaceTotals), y = CatSpcTotal)) +
geom_bar();
ggplot(catSpaceTotals) +
geom_bar(aes(x = rownames(catSpaceTotals), y = CatSpcTotal));
ggplot(catSpaceTotals) +
geom_bar(aes(x = rownames(catSpaceTotals), y = CatSpcTotal, stat = "identity"));
ggplot(catSpaceTotals, aes(x = rownames(catSpaceTotals), y = CatSpcTotal )) +
geom_bar(stat = "identity");
catSpaceTotals
rownames(catSpaceTotals)
gsub("\\.In\\.sq\\.m","",rownames(catSpaceTotals))
cat1 <- gsub("\\.In\\.sq\\.m","",rownames(catSpaceTotals))
as_tibble(cat1)
catName <- gsub("\\.In\\.sq\\.m","",rownames(catSpaceTotals))
catName <- as_tibble(catName)
View(catName)
cbind(catName, catSpaceTotals)
# Get total square meter store space
# for 5 product categories
catSpaceTotals <- colSums(ss[,4:8], na.rm = T)
catSpaceTotals <- as_tibble(catSpaceTotals)
catName <- gsub("\\.In\\.sq\\.m","",rownames(catSpaceTotals))
catName <- as_tibble(catName)
cbind(catName, catSpaceTotals)
colnames(catSpaceTotals) <- c("Category","CatSpcTotal")
catSpaceTotals <- cbind(catName, catSpaceTotals)
colnames(catSpaceTotals) <- c("Category","CatSpcTotal")
ggplot(catSpaceTotals, aes(x = rownames(catSpaceTotals), y = CatSpcTotal )) +
geom_bar(stat = "identity")
ggplot(catSpaceTotals, aes(x = Category, y = CatSpcTotal )) +
geom_bar(stat = "identity")
ggplot(catSpaceTotals, aes(x = Category, y = CatSpcTotal )) +
geom_bar(stat = "identity")
rm(catName)
rm(cat1)
ggplot(catSpaceTotals, aes(x = Category, y = CatSpcTotal )) +
geom_bar(stat = "identity") +
ggtitle("Category Space Totals")
ggplot(catSpaceTotals, aes(x = Category, y = CatSpcTotal )) +
geom_bar(stat = "identity") +
ggtitle("Category Space Totals \n in square meters")
ggplot(catSpaceTotals, aes(x = Category, y = CatSpcTotal )) +
geom_bar(stat = "identity") +
ggtitle("Category Space Totals \n (in square meters)")
# Plot category space totals
ggplot(catSpaceTotals, aes(x = Category, y = CatSpcTotal )) +
geom_bar(stat = "identity") +
ggtitle("Category Space Totals \n (all stores in square meters)")
# Plot category space totals
ggplot(catSpaceTotals, aes(x = Category, y = CatSpcTotal )) +
geom_bar(stat = "identity") +
ggtitle("Category Space Totals \n (all stores, in square meters)")
sbs
# Create valid column names for 'Sales by Store' table
h1 <- colnames(prp) %>%
make.names()
# Read in 'Product Range Performance worksheet
prp <- read_xlsx("Product-Range-Management.xlsx", sheet = "Basic Option", skip = 2)
View(prp)
# Create valid column names for 'Sales by Store' table
h1 <- colnames(prp) %>%
make.names()
names(prp) <- gsub("\\.\\.","\\.",h1)
rm(h1)
colnames(prp[,1]) <- "Category"
colnames(prp[,1]) <- "Category"
colnames(prp[,1]) <- "Category"
rename(prp, Category = X__1)
prp <- rename(prp, Category = X__1)
View(prp)
prp[1:6,1:2]
catSpace <- prp[1:6,1:2]
rename(catSpace, Space = Space.in.sq.m)
rename(catSpace, Space = Space.In.sq.m)
# Get category space in square meters
catSpace <- prp[1:6,1:2] %>%
rename(Space = Space.In.sq.m)
View(catSpace)
# Plot category space totals
ggplot(catSpace, aes(x = Category, y = Space )) +
geom_bar(stat = "identity") +
ggtitle("Category Space Totals \n (all stores, in square meters)")
# Get sales by category (USD)
salesByCat <- prp[1:6,c(1,3)]
View(salesByCat)
colnames(salesByCat)
# Get sales by category
#  (USD in thousands)
salesByCat <- prp[1:6,c(1,3)] %>%
rename(Sales = Sales.generated.In.thousands.of.USD)
# Plot sales totals by category
ggplot(salesByCat, aes(x = Category, y = Sales )) +
geom_bar(stat = "identity") +
ggtitle("Sales by Category \n (all stores, in USD thousands)")
salesDens <- salesByCat[,2] / catSpace[,2]
View(salesDens)
salesDens <- salesByCat[,2] / catSpace[,2] * 1000
cbind(salesByCat[,1], salesDens[,1])
salesDens <- salesByCat[,2] / catSpace[,2] * 1000 %>%
cbind(salesByCat[,1], salesDens[,1])
salesDens <- salesByCat[,2] / catSpace[,2] * 1000
salesDens <-  cbind(salesByCat[,1], salesDens[,1])
salesDens <- salesByCat[,2] / catSpace[,2] * 1000
salesDens <-  cbind(salesByCat[,1], salesDens[,1]) %>%
rename(Sales_Density = salesDens[, 1])
salesDens <- salesByCat[,2] / catSpace[,2] * 1000
salesDens <-  cbind(salesByCat[,1], salesDens[,1]) %>%
rename(Sales_Density = 'salesDens[, 1]')
# Plot sales density by category
ggplot(salesDens, aes(x = Category, y = Sales_Density )) +
geom_bar(stat = "identity") +
ggtitle("Sales Density by Category \n (all stores, in USD thousands)")
# Plot sales density by category
ggplot(salesDens, aes(x = Category, y = Sales_Density )) +
geom_bar(stat = "identity") +
ggtitle("Sales Density by Category \n (in USD per sq meter)")
# Plot sales density by category
ggplot(salesDens, aes(x = Category, y = Sales_Density )) +
geom_bar(stat = "identity") +
ggtitle("Sales Density by Category \n (USD per sq meter)")
# Plot sales density by category
ggplot(salesDens, aes(x = Category, y = Sales_Density )) +
geom_bar(stat = "identity") +
ggtitle("Sales Density by Category \n   (USD per sq meter)")
margins <- prp[1:6,c(1,5)]
View(margins)
colnames(margins)
margins <- prp[1:6,c(1,5)] %>%
rename(Margins = X.Margin)
# Plot margins by category
ggplot(margins, aes(x = Category, y = Margins )) +
geom_bar(stat = "identity") +
ggtitle("Margins by Category \n    (percent)")
# Plot margins by category
ggplot(margins, aes(x = Category, y = Margins )) +
geom_bar(stat = "identity") +
ggtitle("Margins by Category \n      (percent)")
# Calculate margin density by product category
salesDens[,2] * margins[,2]
# Calculate margin density by product category
marginDens <- salesDens[,2] * margins[,2]
View(marginDens)
cbind(salesDens[,1], marginDens[,1])
marginDens <- cbind(salesDens[,1], marginDens[,1])
colnames(marginDens)
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
colnames() <- c("Category","Margin")
marginDens <- colnames() <- c("Category","Margin")
# Calculate margin density by product category
marginDens <- salesDens[,2] * margins[,2]
marginDens <- cbind(salesDens[,1], marginDens[,1])
marginDens <- colnames() <- c("Category","Margin")
marginDens <- c("Category","Margin")
# Calculate margin density by product category
marginDens <- salesDens[,2] * margins[,2]
marginDens <- cbind(salesDens[,1], marginDens[,1])
marginDens <- c("Category","Margin")
# Calculate margin density by product category
marginDens <- salesDens[,2] * margins[,2]
marginDens <- cbind(salesDens[,1], marginDens[,1])
colnames(marginDens) <- c("Category","Margin")
# Calculate margin density by product category
marginDens <- salesDens[,2] * margins[,2]
marginDens <- cbind(salesDens[,1], marginDens[,1])
colnames(marginDens) <- c("Category","Margin")
# Calculate margin density by product category
marginDens <- salesDens[,2] * margins[,2]
marginDens <- cbind(salesDens[,1], marginDens[,1])
names(marginDens) <- c("Category","Margin")
# Calculate margin density by product category
marginDens <- salesDens[,2] * margins[,2]
# Calculate margin density by product category
marginDens <- salesDens[,2] * margins[,2]
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
rename(Category,Margin)
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
salesDens[,1]
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
salesDens
View(salesDens)
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
salesDens
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
salesDens[]
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
salesDens[,1]
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
salesDens$Category
str(salesDens)
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
salesDens[,1]
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
salesDens[,,1]
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
salesDens[1]
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
salesDens
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
prp[,1]
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
marginDens[,1]
# Calculate margin density by product category
marginDens <- salesDens[,2] * margins[,2]
[1]
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
marginDens
# Calculate margin density by product category
marginDens <- salesDens[,2] * margins[,2]
View(marginDens)
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
marginDens
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
marginDens[,1]
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
marginDens[1,1]
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
marginDens[1]
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
marginDens$Margins
# Calculate margin density by product category
marginDens <- salesDens[,2] * margins[,2]
marginDens <- cbind(salesDens[,1], marginDens[,1]) %>%
marginDens
# Calculate margin density by product category
marginDens <- salesDens[,2] * margins[,2] %>%
rename(Margin_Density = Margins)
marginDens[,1]
salesDens[,1]
cbind(salesDens[,1], marginDens[,1])
as_tibble(cbind(salesDens[,1], marginDens[,1]))
marginDens <- as_tibble(cbind(salesDens[,1], marginDens[,1])) %>%
rename(Category = V1, Margin_Density = V2)
# Plot margin density by category
ggplot(marginDens, aes(x = Category, y = Margin_Density )) +
geom_bar(stat = "identity") +
ggtitle("Margin Density by Category \n    (USD per sq meter)")
